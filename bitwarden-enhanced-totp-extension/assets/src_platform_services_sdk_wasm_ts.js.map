{"version":3,"file":"assets/src_platform_services_sdk_wasm_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAiE;;AAEjE;AACO,SAASC,IAAIA,CAACC,IAAI,EAAE;EACzBF,8EAAc,CAACE,IAAI,CAAC;AACtB;;;;;;;;;;;;;;;;;ACL+C;AACiC;AAI/E,UAAiC,CAAC,OAAO,GAAG,GAAG,EAAE;IAC/C,yDAAgB,CAAC,oFAAI,CAAC,CAAC;AAC1B,CAAC,CAAC","sources":["webpack:///../../node_modules/@bitwarden/sdk-internal/index.js","webpack:///./src/platform/services/sdk/wasm.ts"],"sourcesContent":["import { __wbg_set_wasm } from \"./bitwarden_wasm_internal_bg.js\";\n\n// In order to support a fallback strategy for web we need to conditionally load the wasm file\nexport function init(wasm) {\n  __wbg_set_wasm(wasm);\n}\n\nexport * from \"./bitwarden_wasm_internal_bg.js\";\n","import * as sdk from \"@bitwarden/sdk-internal\";\nimport * as wasm from \"@bitwarden/sdk-internal/bitwarden_wasm_internal_bg.wasm\";\n\nimport { GlobalWithWasmInit } from \"./browser-sdk-load.service\";\n\n(globalThis as GlobalWithWasmInit).initSdk = () => {\n  (sdk as any).init(wasm);\n};\n"],"names":["__wbg_set_wasm","init","wasm"],"sourceRoot":""}